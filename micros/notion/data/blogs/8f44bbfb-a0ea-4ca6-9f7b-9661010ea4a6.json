{"object":"list","results":[{"object":"block","id":"7245ed94-521e-4b82-8a3a-43dbd0086589","parent":{"type":"page_id","page_id":"8f44bbfb-a0ea-4ca6-9f7b-9661010ea4a6"},"created_time":"2023-01-17T16:47:00.000Z","last_edited_time":"2023-01-17T16:47:00.000Z","created_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"last_edited_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"The Dutch national flag problem[1] is a computational problem proposed by Edsger Dijkstra.[2] The flag of the Netherlands consists of three colours: red, white, and blue. Given balls of these three colours arranged randomly in a line (it does not matter how many balls there are), the task is to arrange them such that all balls of the same colour are together and their collective colour groups are in the correct order.","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"The Dutch national flag problem[1] is a computational problem proposed by Edsger Dijkstra.[2] The flag of the Netherlands consists of three colours: red, white, and blue. Given balls of these three colours arranged randomly in a line (it does not matter how many balls there are), the task is to arrange them such that all balls of the same colour are together and their collective colour groups are in the correct order.","href":null}],"color":"default"}},{"object":"block","id":"c736947d-e5a8-4e3d-86c8-54a87004a35f","parent":{"type":"page_id","page_id":"8f44bbfb-a0ea-4ca6-9f7b-9661010ea4a6"},"created_time":"2023-01-17T16:47:00.000Z","last_edited_time":"2023-01-17T16:47:00.000Z","created_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"last_edited_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"The solution to this problem is of interest for designing sorting algorithms; in particular, variants of the quicksort algorithm that must be robust to repeated elements may use a three-way partitioning function that groups items less than a given key (red), equal to the key (white) and greater than the key (blue). Several solutions exist that have varying performance characteristics, tailored to sorting arrays with either small or large numbers of repeated elements.[3]","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"The solution to this problem is of interest for designing sorting algorithms; in particular, variants of the quicksort algorithm that must be robust to repeated elements may use a three-way partitioning function that groups items less than a given key (red), equal to the key (white) and greater than the key (blue). Several solutions exist that have varying performance characteristics, tailored to sorting arrays with either small or large numbers of repeated elements.[3]","href":null}],"color":"default"}},{"object":"block","id":"e6ab457d-4c62-4329-84f3-b59ae470f672","parent":{"type":"page_id","page_id":"8f44bbfb-a0ea-4ca6-9f7b-9661010ea4a6"},"created_time":"2023-01-17T16:47:00.000Z","last_edited_time":"2023-01-17T16:47:00.000Z","created_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"last_edited_by":{"object":"user","id":"a8b73ecc-1a98-42d8-a5c5-91ca698bb8d8"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"procedure three-way-partition(A : array of values, mid : value):\n    i ← 0\n    j ← 0\n    k ← size of A - 1\n\n    while j <= k:\n        if A[j] < mid:\n            swap A[i] and A[j]\n            i ← i + 1\n            j ← j + 1\n        else if A[j] > mid:\n            swap A[j] and A[k]\n            k ← k - 1\n        else:\n            j ← j + 1","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"procedure three-way-partition(A : array of values, mid : value):\n    i ← 0\n    j ← 0\n    k ← size of A - 1\n\n    while j <= k:\n        if A[j] < mid:\n            swap A[i] and A[j]\n            i ← i + 1\n            j ← j + 1\n        else if A[j] > mid:\n            swap A[j] and A[k]\n            k ← k - 1\n        else:\n            j ← j + 1","href":null}],"language":"javascript"}}],"next_cursor":null,"has_more":false,"type":"block","block":{}}